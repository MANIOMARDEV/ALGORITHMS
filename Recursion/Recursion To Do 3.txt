# Recursive Binary Search
def rBinarySearch(arr, val):
    if not arr:
        return False
    mid = len(arr) // 2
    if arr[mid] == val:
        return True
    elif arr[mid] < val:
        return rBinarySearch(arr[mid+1:], val)
    else:
        return rBinarySearch(arr[:mid], val)

# Greatest Common Factor (GCF)
def rGCF(num1, num2):
    if num1 == num2:
        return num1
    elif num1 > num2:
        return rGCF(num1 - num2, num2)
    else:
        return rGCF(num1, num2 - num1)

# Tarai Function
def tarai(x, y, z):
    if x <= y:
        return y
    else:
        return tarai(tarai(x-1, y, z), tarai(y-1, z, x), tarai(z-1, x, y))

# String: In-Order Subsets
def strSubsets(s):
    if len(s) == 0:
        return ['']
    subsets = strSubsets(s[1:])
    return subsets + [s[0] + subset for subset in subsets]

# Test cases
print(rBinarySearch([1,3,5,6], 4))  # Output: False
print(rBinarySearch([4,5,6,8,12], 5))  # Output: True
print(rGCF(123456, 987654))  # Output: 6
print(tarai(10, 2, 9))  # Output: 9
print(strSubsets("abc"))  # Output: ['', 'c', 'b', 'bc', 'a', 'ac', 'ab', 'abc']
